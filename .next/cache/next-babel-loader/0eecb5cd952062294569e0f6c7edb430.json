{"ast":null,"code":"import { nSQL } from '@nano-sql/core';\n\nconst connectMiddleware = handler => async (req, res) => {\n  const dbName = 'with-redux-toolkit';\n\n  if (!nSQL().listDatabases().includes(dbName)) {\n    await nSQL().createDatabase({\n      id: dbName,\n      mode: 'PERM',\n      tables: [{\n        name: 'notes',\n        model: {\n          'id:uuid': {\n            pk: true\n          },\n          'title:string': {\n            notNull: true\n          },\n          'content:string': {\n            notNull: true\n          },\n          'createdAt:date': {\n            default: () => new Date()\n          }\n        }\n      }],\n      version: 1\n    });\n  }\n\n  nSQL().useDatabase(dbName);\n  return handler(req, res);\n};\n\nconst saveNote = async (req, res) => {\n  const {\n    title,\n    content\n  } = req.body;\n  const errors = {};\n  if (!title) errors['title'] = 'Title is required';\n  if (!content) errors['content'] = 'Content is required';\n  if (Object.keys(errors).length > 0) return res.status(422).json({\n    statusCode: 422,\n    message: 'Unprocessable Entity',\n    errors\n  });\n  const [note] = await nSQL('notes').query('upsert', {\n    title,\n    content\n  }).exec();\n  res.status(201).json(note);\n};\n\nconst listNotes = async (_, res) => {\n  const notes = await nSQL('notes').query('select').exec();\n  res.json(notes);\n};\n\nconst updateNote = async (req, res) => {\n  const {\n    noteId\n  } = req.query;\n  const [note] = await nSQL().query('select').where(['id', '=', noteId]).limit(1).exec();\n  if (!note) return res.status(404).json({\n    statusCode: 404,\n    message: 'Not Found'\n  });\n  const {\n    title = note.title,\n    content = note.content\n  } = req.body;\n  const [noteUpdated] = await nSQL('notes').query('upsert', {\n    title,\n    content\n  }).where(['id', '=', noteId]).limit(1).exec();\n  res.json(noteUpdated);\n};\n\nconst removeNote = async (req, res) => {\n  const {\n    noteId\n  } = req.query;\n  const [note] = await nSQL().query('select').where(['id', '=', noteId]).limit(1).exec();\n  if (!note) return res.status(404).json({\n    statusCode: 404,\n    message: 'Not Found'\n  });\n  await nSQL('notes').query('delete').where(['id', '=', noteId]).limit(1).exec();\n  res.status(204).send(null);\n};\n\nconst handler = (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      return saveNote(req, res);\n\n    case 'GET':\n      return listNotes(req, res);\n\n    case 'PUT':\n      return updateNote(req, res);\n\n    case 'DELETE':\n      return removeNote(req, res);\n\n    default:\n      return res.status(404).json({\n        statusCode: 404,\n        message: 'Not Found'\n      });\n  }\n};\n\nexport default connectMiddleware(handler);","map":{"version":3,"sources":["/home/joao/Develop/tests/nextjs-reduxtoolkit-saga-apollo/nextjs-reduxtoolkit-saga-apollo/pages/api/notes.js"],"names":["nSQL","connectMiddleware","handler","req","res","dbName","listDatabases","includes","createDatabase","id","mode","tables","name","model","pk","notNull","default","Date","version","useDatabase","saveNote","title","content","body","errors","Object","keys","length","status","json","statusCode","message","note","query","exec","listNotes","_","notes","updateNote","noteId","where","limit","noteUpdated","removeNote","send","method"],"mappings":"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","sourcesContent":["import { nSQL } from '@nano-sql/core'\n\nconst connectMiddleware = (handler) => async (req, res) => {\n  const dbName = 'with-redux-toolkit'\n\n  if (!nSQL().listDatabases().includes(dbName)) {\n    await nSQL().createDatabase({\n      id: dbName,\n      mode: 'PERM',\n      tables: [\n        {\n          name: 'notes',\n          model: {\n            'id:uuid': { pk: true },\n            'title:string': { notNull: true },\n            'content:string': { notNull: true },\n            'createdAt:date': { default: () => new Date() },\n          },\n        },\n      ],\n      version: 1,\n    })\n  }\n  nSQL().useDatabase(dbName)\n\n  return handler(req, res)\n}\nconst saveNote = async (req, res) => {\n  const { title, content } = req.body\n  const errors = {}\n\n  if (!title) errors['title'] = 'Title is required'\n\n  if (!content) errors['content'] = 'Content is required'\n\n  if (Object.keys(errors).length > 0)\n    return res.status(422).json({\n      statusCode: 422,\n      message: 'Unprocessable Entity',\n      errors,\n    })\n\n  const [note] = await nSQL('notes').query('upsert', { title, content }).exec()\n\n  res.status(201).json(note)\n}\nconst listNotes = async (_, res) => {\n  const notes = await nSQL('notes').query('select').exec()\n\n  res.json(notes)\n}\nconst updateNote = async (req, res) => {\n  const { noteId } = req.query\n  const [note] = await nSQL()\n    .query('select')\n    .where(['id', '=', noteId])\n    .limit(1)\n    .exec()\n\n  if (!note)\n    return res.status(404).json({\n      statusCode: 404,\n      message: 'Not Found',\n    })\n\n  const { title = note.title, content = note.content } = req.body\n  const [noteUpdated] = await nSQL('notes')\n    .query('upsert', { title, content })\n    .where(['id', '=', noteId])\n    .limit(1)\n    .exec()\n\n  res.json(noteUpdated)\n}\nconst removeNote = async (req, res) => {\n  const { noteId } = req.query\n  const [note] = await nSQL()\n    .query('select')\n    .where(['id', '=', noteId])\n    .limit(1)\n    .exec()\n\n  if (!note)\n    return res.status(404).json({\n      statusCode: 404,\n      message: 'Not Found',\n    })\n\n  await nSQL('notes').query('delete').where(['id', '=', noteId]).limit(1).exec()\n\n  res.status(204).send(null)\n}\n\nconst handler = (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      return saveNote(req, res)\n    case 'GET':\n      return listNotes(req, res)\n    case 'PUT':\n      return updateNote(req, res)\n    case 'DELETE':\n      return removeNote(req, res)\n    default:\n      return res.status(404).json({\n        statusCode: 404,\n        message: 'Not Found',\n      })\n  }\n}\n\nexport default connectMiddleware(handler)\n"]},"metadata":{},"sourceType":"module"}