{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    // doesn't actually mutate the state because it uses the Immer library,\n    // which detects changes to a \"draft state\" and produces a brand new\n    // immutable state based off those changes\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    reset: state => {\n      state.value = 0;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\n/**\n * Extract count from root state\n *\n * @param   {Object} state The root state\n * @returns {number} The current count\n */\n\nexport const selectCount = state => state.counter.value;\nexport const {\n  increment,\n  decrement,\n  reset,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/home/joao/Develop/tests/nextjs-reduxtoolkit-saga-apollo/nextjs-reduxtoolkit-saga-apollo/lib/slices/counterSlice.js"],"names":["createSlice","counterSlice","name","initialState","value","reducers","increment","state","decrement","reset","incrementByAmount","action","payload","selectCount","counter","actions","incrementAsync","amount","dispatch","setTimeout","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAGD,WAAW,CAAC;AAC/BE,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFiB;AAK/BC,EAAAA,QAAQ,EAAE;AACR;AACA;AACA;AACA;AACAC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAVO;AAWRK,IAAAA,KAAK,EAAGF,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAACH,KAAN,GAAc,CAAd;AACD,KAbO;AAcRM,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACH,KAAN,IAAeO,MAAM,CAACC,OAAtB;AACD;AAhBO;AALqB,CAAD,CAAhC;AAyBA;;;;;;;AAMA,OAAO,MAAMC,WAAW,GAAIN,KAAD,IAAWA,KAAK,CAACO,OAAN,CAAcV,KAA7C;AAEP,OAAO,MAAM;AACXE,EAAAA,SADW;AAEXE,EAAAA,SAFW;AAGXC,EAAAA,KAHW;AAIXC,EAAAA;AAJW,IAKTT,YAAY,CAACc,OALV,C,CAOP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACtDC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,QAAQ,CAACR,iBAAiB,CAACO,MAAD,CAAlB,CAAR;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM;AAMP,eAAehB,YAAY,CAACmB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    // doesn't actually mutate the state because it uses the Immer library,\n    // which detects changes to a \"draft state\" and produces a brand new\n    // immutable state based off those changes\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    reset: (state) => {\n      state.value = 0\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\n/**\n * Extract count from root state\n *\n * @param   {Object} state The root state\n * @returns {number} The current count\n */\nexport const selectCount = (state) => state.counter.value\n\nexport const {\n  increment,\n  decrement,\n  reset,\n  incrementByAmount,\n} = counterSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount) => (dispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount))\n  }, 1000)\n}\n\nexport default counterSlice.reducer\n"]},"metadata":{},"sourceType":"module"}