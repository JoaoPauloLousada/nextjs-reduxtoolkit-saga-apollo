{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    // doesn't actually mutate the state because it uses the Immer library,\n    // which detects changes to a \"draft state\" and produces a brand new\n    // immutable state based off those changes\n    increment: function increment(state) {\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    reset: function reset(state) {\n      state.value = 0;\n    },\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  }\n});\n/**\n * Extract count from root state\n *\n * @param   {Object} state The root state\n * @returns {number} The current count\n */\n\nexport var selectCount = function selectCount(state) {\n  return state.counter.value;\n};\nvar _counterSlice$actions = counterSlice.actions,\n    increment = _counterSlice$actions.increment,\n    decrement = _counterSlice$actions.decrement,\n    reset = _counterSlice$actions.reset,\n    incrementByAmount = _counterSlice$actions.incrementByAmount; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport { increment, decrement, reset, incrementByAmount };\nexport var incrementAsync = function incrementAsync(amount) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(incrementByAmount(amount));\n    }, 1000);\n  };\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/home/joao/Develop/tests/nextjs-reduxtoolkit-saga-apollo/nextjs-reduxtoolkit-saga-apollo/lib/slices/counterSlice.js"],"names":["createSlice","counterSlice","name","initialState","value","reducers","increment","state","decrement","reset","incrementByAmount","action","payload","selectCount","counter","actions","incrementAsync","amount","dispatch","setTimeout","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAMC,YAAY,GAAGD,WAAW,CAAC;AAC/BE,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFiB;AAK/BC,EAAAA,QAAQ,EAAE;AACR;AACA;AACA;AACA;AACAC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,SAAS,EAAE,mBAACD,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAVO;AAWRK,IAAAA,KAAK,EAAE,eAACF,KAAD,EAAW;AAChBA,MAAAA,KAAK,CAACH,KAAN,GAAc,CAAd;AACD,KAbO;AAcRM,IAAAA,iBAAiB,EAAE,2BAACH,KAAD,EAAQI,MAAR,EAAmB;AACpCJ,MAAAA,KAAK,CAACH,KAAN,IAAeO,MAAM,CAACC,OAAtB;AACD;AAhBO;AALqB,CAAD,CAAhC;AAyBA;;;;;;;AAMA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACN,KAAD;AAAA,SAAWA,KAAK,CAACO,OAAN,CAAcV,KAAzB;AAAA,CAApB;4BAOHH,YAAY,CAACc,O;IAJfT,S,yBAAAA,S;IACAE,S,yBAAAA,S;IACAC,K,yBAAAA,K;IACAC,iB,yBAAAA,iB,EAGF;AACA;AACA;AACA;;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAc;AACtDC,IAAAA,UAAU,CAAC,YAAM;AACfD,MAAAA,QAAQ,CAACR,iBAAiB,CAACO,MAAD,CAAlB,CAAR;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJ6B;AAAA,CAAvB;AAMP,eAAehB,YAAY,CAACmB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    // doesn't actually mutate the state because it uses the Immer library,\n    // which detects changes to a \"draft state\" and produces a brand new\n    // immutable state based off those changes\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    reset: (state) => {\n      state.value = 0\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\n/**\n * Extract count from root state\n *\n * @param   {Object} state The root state\n * @returns {number} The current count\n */\nexport const selectCount = (state) => state.counter.value\n\nexport const {\n  increment,\n  decrement,\n  reset,\n  incrementByAmount,\n} = counterSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount) => (dispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount))\n  }, 1000)\n}\n\nexport default counterSlice.reducer\n"]},"metadata":{},"sourceType":"module"}