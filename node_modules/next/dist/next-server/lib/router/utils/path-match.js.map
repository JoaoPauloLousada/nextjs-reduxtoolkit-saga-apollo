{"version":3,"sources":["../../../../../next-server/lib/router/utils/path-match.ts"],"names":["matcherOptions","sensitive","delimiter","decode","decodeParam","customRouteMatcherOptions","strict","customRoute","path","keys","matcherRegex","pathToRegexp","matcher","regexpToFunction","pathname","params","res","key","name","param","decodeURIComponent","_","err","Error","code"],"mappings":"0IAAA,uF,u1BAIO,KAAMA,CAAAA,cAAc,CAAG,CAC5BC,SAAS,CAAE,KADiB,CAE5BC,SAAS,CAAE,GAFiB,CAG5BC,MAAM,CAAEC,WAHoB,CAAvB,C,sCAMA,KAAMC,CAAAA,yBAAyB,CAAG,CACvC,GAAGL,cADoC,CAEvCM,MAAM,CAAE,IAF+B,CAAlC,C,yEAKQ,CAACC,WAAW,CAAG,KAAf,GAAyB,CACtC,MAAQC,CAAAA,IAAD,EAAkB,CACvB,KAAMC,CAAAA,IAAwB,CAAG,EAAjC,CACA,KAAMC,CAAAA,YAAY,CAAGC,YAAY,CAACA,YAAb,CACnBH,IADmB,CAEnBC,IAFmB,CAGnBF,WAAW,CAAGF,yBAAH,CAA+BL,cAHvB,CAArB,CAKA,KAAMY,CAAAA,OAAO,CAAGD,YAAY,CAACE,gBAAb,CACdH,YADc,CAEdD,IAFc,CAGdT,cAHc,CAAhB,CAMA,MAAO,CAACc,QAAD,CAAsCC,MAAtC,GAAuD,CAC5D,KAAMC,CAAAA,GAAG,CAAGF,QAAQ,EAAI,IAAZ,CAAmB,KAAnB,CAA2BF,OAAO,CAACE,QAAD,CAA9C,CACA,GAAI,CAACE,GAAL,CAAU,CACR,MAAO,MAAP,CACD,CAED,GAAIT,WAAJ,CAAiB,CACf,IAAK,KAAMU,CAAAA,GAAX,GAAkBR,CAAAA,IAAlB,CAAwB,CACtB;AACA;AACA,GAAI,MAAOQ,CAAAA,GAAG,CAACC,IAAX,GAAoB,QAAxB,CAAkC,CAChC,MAAQF,CAAAA,GAAG,CAACD,MAAL,CAAoBE,GAAG,CAACC,IAAxB,CAAP,CACD,CACF,CACF,CAED,MAAO,CAAE,GAAGH,MAAL,CAAa,GAAGC,GAAG,CAACD,MAApB,CAAP,CACD,CAjBD,CAkBD,CA/BD,CAgCD,C,0BAED,QAASX,CAAAA,WAAT,CAAqBe,KAArB,CAAoC,CAClC,GAAI,CACF,MAAOC,CAAAA,kBAAkB,CAACD,KAAD,CAAzB,CACD,CAAC,MAAOE,CAAP,CAAU,CACV,KAAMC,CAAAA,GAA8B,CAAG,GAAIC,CAAAA,KAAJ,CAAU,wBAAV,CAAvC,CACAD,GAAG,CAACE,IAAJ,CAAW,eAAX,CACA,KAAMF,CAAAA,GAAN,CACD,CACF","sourcesContent":["import * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\n\nexport { pathToRegexp }\n\nexport const matcherOptions = {\n  sensitive: false,\n  delimiter: '/',\n  decode: decodeParam,\n}\n\nexport const customRouteMatcherOptions = {\n  ...matcherOptions,\n  strict: true,\n}\n\nexport default (customRoute = false) => {\n  return (path: string) => {\n    const keys: pathToRegexp.Key[] = []\n    const matcherRegex = pathToRegexp.pathToRegexp(\n      path,\n      keys,\n      customRoute ? customRouteMatcherOptions : matcherOptions\n    )\n    const matcher = pathToRegexp.regexpToFunction(\n      matcherRegex,\n      keys,\n      matcherOptions\n    )\n\n    return (pathname: string | null | undefined, params?: any) => {\n      const res = pathname == null ? false : matcher(pathname)\n      if (!res) {\n        return false\n      }\n\n      if (customRoute) {\n        for (const key of keys) {\n          // unnamed params should be removed as they\n          // are not allowed to be used in the destination\n          if (typeof key.name === 'number') {\n            delete (res.params as any)[key.name]\n          }\n        }\n      }\n\n      return { ...params, ...res.params }\n    }\n  }\n}\n\nfunction decodeParam(param: string) {\n  try {\n    return decodeURIComponent(param)\n  } catch (_) {\n    const err: Error & { code?: string } = new Error('failed to decode param')\n    err.code = 'DECODE_FAILED'\n    throw err\n  }\n}\n"]}