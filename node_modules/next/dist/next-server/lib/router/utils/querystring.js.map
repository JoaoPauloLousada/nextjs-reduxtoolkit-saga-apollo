{"version":3,"sources":["../../../../../next-server/lib/router/utils/querystring.ts"],"names":["searchParamsToUrlQuery","searchParams","query","forEach","value","key","Array","isArray","push","urlQueryToSearchParams","urlQuery","result","URLSearchParams","Object","entries","item","append","set","assign","target","searchParamsList","from","keys","delete"],"mappings":"uKAEO,QAASA,CAAAA,sBAAT,CACLC,YADK,CAEW,CAChB,KAAMC,CAAAA,KAAqB,CAAG,EAA9B,CACAD,YAAY,CAACE,OAAb,CAAqB,CAACC,KAAD,CAAQC,GAAR,GAAgB,CACnC,GAAI,MAAOH,CAAAA,KAAK,CAACG,GAAD,CAAZ,GAAsB,WAA1B,CAAuC,CACrCH,KAAK,CAACG,GAAD,CAAL,CAAaD,KAAb,CACD,CAFD,IAEO,IAAIE,KAAK,CAACC,OAAN,CAAcL,KAAK,CAACG,GAAD,CAAnB,CAAJ,CAA+B,CACpC,CAAEH,KAAK,CAACG,GAAD,CAAN,CAAyBG,IAAzB,CAA8BJ,KAA9B,EACF,CAFM,IAEA,CACLF,KAAK,CAACG,GAAD,CAAL,CAAa,CAACH,KAAK,CAACG,GAAD,CAAN,CAAuBD,KAAvB,CAAb,CACD,CACF,CARD,EASA,MAAOF,CAAAA,KAAP,CACD,CAEM,QAASO,CAAAA,sBAAT,CACLC,QADK,CAEY,CACjB,KAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,eAAJ,EAAf,CACAC,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBP,OAAzB,CAAiC,CAAC,CAACE,GAAD,CAAMD,KAAN,CAAD,GAAkB,CACjD,GAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,CAA0B,CACxBA,KAAK,CAACD,OAAN,CAAeY,IAAD,EAAUJ,MAAM,CAACK,MAAP,CAAcX,GAAd,CAAmBU,IAAnB,CAAxB,EACD,CAFD,IAEO,CACLJ,MAAM,CAACM,GAAP,CAAWZ,GAAX,CAAgBD,KAAhB,EACD,CACF,CAND,EAOA,MAAOO,CAAAA,MAAP,CACD,CAEM,QAASO,CAAAA,MAAT,CACLC,MADK,CAEL,GAAGC,gBAFE,CAGY,CACjBA,gBAAgB,CAACjB,OAAjB,CAA0BF,YAAD,EAAkB,CACzCK,KAAK,CAACe,IAAN,CAAWpB,YAAY,CAACqB,IAAb,EAAX,EAAgCnB,OAAhC,CAAyCE,GAAD,EAASc,MAAM,CAACI,MAAP,CAAclB,GAAd,CAAjD,EACAJ,YAAY,CAACE,OAAb,CAAqB,CAACC,KAAD,CAAQC,GAAR,GAAgBc,MAAM,CAACH,MAAP,CAAcX,GAAd,CAAmBD,KAAnB,CAArC,EACD,CAHD,EAIA,MAAOe,CAAAA,MAAP,CACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(query[key])) {\n      ;(query[key] as string[]).push(value)\n    } else {\n      query[key] = [query[key] as string, value]\n    }\n  })\n  return query\n}\n\nexport function urlQueryToSearchParams(\n  urlQuery: ParsedUrlQuery\n): URLSearchParams {\n  const result = new URLSearchParams()\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((item) => result.append(key, item))\n    } else {\n      result.set(key, value)\n    }\n  })\n  return result\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  searchParamsList.forEach((searchParams) => {\n    Array.from(searchParams.keys()).forEach((key) => target.delete(key))\n    searchParams.forEach((value, key) => target.append(key, value))\n  })\n  return target\n}\n"]}