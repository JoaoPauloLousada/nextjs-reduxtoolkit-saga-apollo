{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["DUMMY_BASE","URL","window","parseRelativeUrl","url","base","resolvedBase","pathname","searchParams","search","hash","href","origin","protocol","Error","slice","length"],"mappings":"+EAAA,kCAEA,KAAMA,CAAAA,UAAU,CAAG,GAAIC,CAAAA,GAAJ,CACjB,MAAOC,CAAAA,MAAP,GAAkB,WAAlB,CAAgC,UAAhC,CAA6C,8BAD5B,CAAnB,CAIA;;;;;GAMO,QAASC,CAAAA,gBAAT,CAA0BC,GAA1B,CAAuCC,IAAvC,CAAsD,CAC3D,KAAMC,CAAAA,YAAY,CAAGD,IAAI,CAAG,GAAIJ,CAAAA,GAAJ,CAAQI,IAAR,CAAcL,UAAd,CAAH,CAA+BA,UAAxD,CACA,KAAM,CACJO,QADI,CAEJC,YAFI,CAGJC,MAHI,CAIJC,IAJI,CAKJC,IALI,CAMJC,MANI,CAOJC,QAPI,EAQF,GAAIZ,CAAAA,GAAJ,CAAQG,GAAR,CAAaE,YAAb,CARJ,CASA,GACEM,MAAM,GAAKZ,UAAU,CAACY,MAAtB,EACCC,QAAQ,GAAK,OAAb,EAAwBA,QAAQ,GAAK,QAFxC,CAGE,CACA,KAAM,IAAIC,CAAAA,KAAJ,CAAU,iCAAV,CAAN,CACD,CACD,MAAO,CACLP,QADK,CAELC,YAFK,CAGLC,MAHK,CAILC,IAJK,CAKLC,IAAI,CAAEA,IAAI,CAACI,KAAL,CAAWf,UAAU,CAACY,MAAX,CAAkBI,MAA7B,CALD,CAAP,CAOD","sourcesContent":["import { getLocationOrigin } from '../../utils'\n\nconst DUMMY_BASE = new URL(\n  typeof window === 'undefined' ? 'http://n' : getLocationOrigin()\n)\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin,\n    protocol,\n  } = new URL(url, resolvedBase)\n  if (\n    origin !== DUMMY_BASE.origin ||\n    (protocol !== 'http:' && protocol !== 'https:')\n  ) {\n    throw new Error('invariant: invalid relative URL')\n  }\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length),\n  }\n}\n"]}