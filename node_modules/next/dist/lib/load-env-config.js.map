{"version":3,"sources":["../../lib/load-env-config.ts"],"names":["combinedEnv","undefined","cachedLoadedEnvFiles","processEnv","loadedEnvFiles","dir","process","env","__NEXT_PROCESSED_ENV","length","origEnv","Object","assign","parsed","envFile","result","dotenv","parse","contents","log","info","path","join","key","keys","err","error","loadEnvConfig","dev","isTest","NODE_ENV","mode","dotenvFiles","filter","Boolean","dotEnvPath","stats","fs","statSync","isFile","readFileSync","push","code"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport * as log from '../build/output/log'\nimport dotenvExpand from 'next/dist/compiled/dotenv-expand'\nimport dotenv, { DotenvConfigOutput } from 'next/dist/compiled/dotenv'\n\nexport type Env = { [key: string]: string }\nexport type LoadedEnvFiles = Array<{\n  path: string\n  contents: string\n}>\n\nlet combinedEnv: Env | undefined = undefined\nlet cachedLoadedEnvFiles: LoadedEnvFiles = []\n\nexport function processEnv(loadedEnvFiles: LoadedEnvFiles, dir?: string) {\n  // don't reload env if we already have since this breaks escaped\n  // environment values e.g. \\$ENV_FILE_KEY\n  if (\n    combinedEnv ||\n    process.env.__NEXT_PROCESSED_ENV ||\n    !loadedEnvFiles.length\n  ) {\n    return process.env as Env\n  }\n  // flag that we processed the environment values in case a serverless\n  // function is re-used or we are running in `next start` mode\n  process.env.__NEXT_PROCESSED_ENV = 'true'\n\n  const origEnv = Object.assign({}, process.env)\n  const parsed: dotenv.DotenvParseOutput = {}\n\n  for (const envFile of loadedEnvFiles) {\n    try {\n      let result: DotenvConfigOutput = {}\n      result.parsed = dotenv.parse(envFile.contents)\n\n      result = dotenvExpand(result)\n\n      if (result.parsed) {\n        log.info(`Loaded env from ${path.join(dir || '', envFile.path)}`)\n      }\n\n      for (const key of Object.keys(result.parsed || {})) {\n        if (\n          typeof parsed[key] === 'undefined' &&\n          typeof origEnv[key] === 'undefined'\n        ) {\n          parsed[key] = result.parsed?.[key]!\n        }\n      }\n    } catch (err) {\n      log.error(\n        `Failed to load env from ${path.join(dir || '', envFile.path)}`,\n        err\n      )\n    }\n  }\n\n  return Object.assign(process.env, parsed)\n}\n\nexport function loadEnvConfig(\n  dir: string,\n  dev?: boolean\n): {\n  combinedEnv: Env\n  loadedEnvFiles: LoadedEnvFiles\n} {\n  // don't reload env if we already have since this breaks escaped\n  // environment values e.g. \\$ENV_FILE_KEY\n  if (combinedEnv) return { combinedEnv, loadedEnvFiles: cachedLoadedEnvFiles }\n\n  const isTest = process.env.NODE_ENV === 'test'\n  const mode = isTest ? 'test' : dev ? 'development' : 'production'\n  const dotenvFiles = [\n    `.env.${mode}.local`,\n    // Don't include `.env.local` for `test` environment\n    // since normally you expect tests to produce the same\n    // results for everyone\n    mode !== 'test' && `.env.local`,\n    `.env.${mode}`,\n    '.env',\n  ].filter(Boolean) as string[]\n\n  for (const envFile of dotenvFiles) {\n    // only load .env if the user provided has an env config file\n    const dotEnvPath = path.join(dir, envFile)\n\n    try {\n      const stats = fs.statSync(dotEnvPath)\n\n      // make sure to only attempt to read files\n      if (!stats.isFile()) {\n        continue\n      }\n\n      const contents = fs.readFileSync(dotEnvPath, 'utf8')\n      cachedLoadedEnvFiles.push({\n        path: envFile,\n        contents,\n      })\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(`Failed to load env from ${envFile}`, err)\n      }\n    }\n  }\n  combinedEnv = processEnv(cachedLoadedEnvFiles, dir)\n  return { combinedEnv, loadedEnvFiles: cachedLoadedEnvFiles }\n}\n"]}