Object.defineProperty(exports, "__esModule", { value: true });
var syncStorage_1 = require("./adapters/syncStorage");
var webSQL_1 = require("./adapters/webSQL");
var indexedDB_1 = require("./adapters/indexedDB");
var SnapDB;
if (typeof global !== "undefined") {
    SnapDB = global._snapAdapter;
}
exports.detectStorage = function () {
    // NodeJS
    if (typeof window === "undefined") {
        console.warn("RocksDB has been removed in default nanoSQL!  Follow this guide to restore RocksDB databases: https://nanosql.io/migration.html#_2-3-1-2-3-2");
        return "SNP";
    }
    // Browser
    // check for support for indexed db
    if (typeof indexedDB !== "undefined") {
        return "IDB";
    }
    // fall back to WebSQL
    if (typeof window["openDatabase"] !== "undefined") {
        return "WSQL";
    }
    // nothing else works, we gotta do local storage. :(
    return "LS";
};
exports.resolveMode = function (mode, args) {
    if (typeof mode === "string") {
        if (mode === "PERM") {
            mode = exports.detectStorage();
        }
        switch (mode) {
            case "TEMP":
                return new syncStorage_1.SyncStorage(false);
            case "LS":
                return new syncStorage_1.SyncStorage(true);
            case "WSQL":
                return new webSQL_1.WebSQL(args && args.size);
            case "IDB":
                return new indexedDB_1.IndexedDB(args && args.version);
            case "RKS":
                throw new Error("RocksDB is no longer built in!  Grab it here https://www.npmjs.com/package/@nano-sql/adapter-rocksdb");
            case "LVL":
                throw new Error("LevelDB is no longer build in!  Grab it here https://www.npmjs.com/package/@nano-sql/adapter-leveldb");
            case "SNP":
                return new SnapDB();
            default:
                throw new Error("Cannot find mode " + mode + "!");
        }
    }
    else {
        return mode;
    }
};
//# sourceMappingURL=adapter-detect.js.map